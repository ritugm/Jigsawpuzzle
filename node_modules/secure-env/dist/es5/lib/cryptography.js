"use strict";

var crypto = require('crypto');
var fs = require('fs');
var log = require('./utils/log');

/* Arguments that can be passed are  
 * --secret <secretKey>  | -s <secretKey>
 * --out <file-path> | -o <file-path>
 * --algo <algoName> |  -a <algoName> 
 */

module.exports.decrypt = function (options) {
    try {
        var secret = options.secret || 'mySecret';
        var inputFile = options.file || '.env.enc';
        var decryptionAlgo = options.decryptionAlgo || 'aes192';

        if (!fs.existsSync(inputFile)) throw inputFile + ' does not exist.';
        if (!secret || typeof secret !== 'string') throw 'No SecretKey provided.';

        var decipher = crypto.createDecipher(decryptionAlgo, secret);
        var decrypted = decipher.update(fs.readFileSync(inputFile), 'hex', 'utf8');
        decrypted += decipher.final('utf8');
        return decrypted;
    } catch (e) {
        log(e, 'error');
    }
};

module.exports.encrypt = function (options) {
    try {
        var secret = options.secret || 'mySecret';
        var inputFile = options.inputFile || '.env';
        var outputFilePath = options.outputFile || inputFile + '.enc';
        var encryptionAlgo = options.encryptionAlgo || 'aes192';

        if (!fs.existsSync(inputFile)) throw 'Error: ' + inputFile + ' does not exist.';
        if (!secret || typeof secret !== 'string') throw 'No SecretKey provided.Use -s option to specify secret';

        var cipher = crypto.createCipher(encryptionAlgo, secret);
        var output = fs.createWriteStream(outputFilePath);
        fs.createReadStream(inputFile).pipe(cipher).pipe(output);

        output.on('finish', function () {
            log('The Environment file "' + inputFile + '" has been encrypted to "' + outputFilePath + '".', 'info');
            log('Make sure to delete "' + inputFile + '" for production use.', 'warn');
        });
    } catch (e) {
        log(e, 'error');
    }
};